generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  name         String?
  username     String   @unique
  password     String
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  refreshToken RefreshToken[]
  mediaFiles   MediaFile[]
  tweet        Tweet[]
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
}

model Tweet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replyToId String? @db.ObjectId
  authorId  String  @db.ObjectId

  author     User        @relation(fields: [authorId], references: [id])
  replyTo    Tweet?      @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Tweet[]     @relation("replies")
  mediaFiles MediaFile[]
}

model MediaFile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tweetId String? @db.ObjectId
  userId  String  @db.ObjectId

  tweet Tweet? @relation(fields: [tweetId], references: [id])
  user  User   @relation(fields: [userId], references: [id])
}
